name: "[Build] Deploy APKs on comment"

on:
  issue_comment:
    types: [created]

jobs:
  parse-comment:
    if: github.event.issue.pull_request != null && startsWith(github.event.comment.body, '/gradle')
    runs-on: ubuntu-latest
    env:
      INPUT: ${{ github.event.comment.body }}
    outputs:
      gradle-commands: ${{ steps.set-outputs.outputs.gradle-commands }}
      comment-id: ${{ steps.set-outputs.outputs.comment-id }}
    steps:
      - name: Set output values
        id: set-outputs
        run: |
          GRADLE_COMMANDS=''
          if [[ "$INPUT" == *"/gradle all"* ]]; then
            GRADLE_COMMANDS='assembleDebug,assembleRelease'
          else
            if [[ "$INPUT" == *"/gradle debug"* ]]; then
              GRADLE_COMMANDS+='assembleDebug,'
            fi
            if [[ "$INPUT" == *"/gradle release"* ]]; then
              GRADLE_COMMANDS+='assembleRelease,'
            fi
            GRADLE_COMMANDS=${GRADLE_COMMANDS%,}
          fi
          echo "gradle-commands=$GRADLE_COMMANDS" >> $GITHUB_OUTPUT
          echo "comment-id=${{ github.event.comment.id }}" >> $GITHUB_OUTPUT

  build:
    needs: parse-comment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        gradle-command: ${{ fromJson(needs.parse-comment.outputs['gradle-commands']) }}
    outputs:
      artifact-urls: ${{ steps.collect-artifacts.outputs.urls }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Development Environment
        uses: ./.github/actions/setup-development-environment

      - name: Build APK
        run: ./gradlew ${{ matrix.gradle-command }}

      - name: Set APK path
        id: apk
        shell: bash
        run: |
          echo "ID=$(openssl rand -hex 4)" >> $GITHUB_OUTPUT
          echo "PATH=$(find . -name *.apk)" >> $GITHUB_OUTPUT
          echo "NAME=$(basename $(find . -name *.apk))" >> $GITHUB_OUTPUT

      - name: Upload APK to GitHub Artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.apk.outputs.PATH }}
          name: "${{ needs.parse-comment.outputs.comment-id }}-${{ matrix.gradle-command }}"

      - name: Collect artifact URLs
        id: collect-artifacts
        run: |
          echo "urls=$(echo "artifact-${{ matrix.gradle-command }}: ${{ steps.upload-artifact.outputs.artifact-url }}")" >> $GITHUB_OUTPUT

  post-comment:
    needs: [build, parse-comment]
    runs-on: ubuntu-latest
    steps:
      - name: Create APK download links
        id: create-links
        run: |
          echo "Download the APK files from the following links:" > download_links.txt
          for url in ${{ needs.build.outputs.artifact-urls }}; do
            build_type=$(echo $url | cut -d'-' -f2)
            artifact_url=$(echo $url | cut -d' ' -f2)
            echo "[$build_type APK]($artifact_url)" >> download_links.txt
          done

      - name: Post comment with download links
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## APK Build Results
            $(cat download_links.txt)
